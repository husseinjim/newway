
import streamlit as st
import requests
import random
import os

st.set_page_config(page_title="ุฏุฑุฏุดุฉ ูุน ุงูุญุฌููุฉ ุงูุนุฑุงููุฉ", layout="centered")

st.markdown("""
# ๐ฎ๐ถ ุฏุฑุฏุดุฉ ูุน ุงูุญุฌููุฉ ุงูุนุฑุงููุฉ
๐ต ุฃููุงู ุจูู ูููุง ุงูุญุฌููุฉ ุฃู ููุฒู! ุงุณุฃููุง ุนู ููููุ ุงูุญุธุ ุฃู ุงุฎุชุงุฑ ูู ุฎุฏูุงุชูุง ุงูุฃุฎุฑู.

[ุชุงุจุนูุง ุนูู ุฅูุณุชุบุฑุงู](https://www.instagram.com/hajiya.iraq) | [ุชุงุจุนูุง ุนูู ุชูููุฌุฑุงู](https://t.me/HajiyaIraq)
""", unsafe_allow_html=True)

# Chat box UI like WhatsApp
if 'messages' not in st.session_state:
    st.session_state.messages = []

user_input = st.chat_input("ุงูุชุจ ุณุคุงูู ููุง ููุญุฌููุฉ")

if user_input:
    st.session_state.messages.append({"role": "user", "content": user_input})

    api_key = os.getenv("OPENROUTER_API_KEY")
    headers = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json"
    }
    payload = {
        "model": "deepseek/deepseek-r1:free",
        "messages": [{"role": "user", "content": user_input}]
    }

    try:
        response = requests.post("https://openrouter.ai/api/v1/chat/completions", headers=headers, json=payload)
        data = response.json()

        if "choices" in data:
            ai_reply = data["choices"][0]["message"]["content"]
            st.session_state.messages.append({"role": "assistant", "content": ai_reply})
        else:
            st.session_state.messages.append({"role": "assistant", "content": "โ ุงูุญุฌููุฉ ูุง ูููุช ุงูุณุคุงู."})
    except Exception as e:
        st.session_state.messages.append({"role": "assistant", "content": f"โ ุตุงุฑ ุฎุทุฃ: {e}"})


with st.container():
    for msg in st.session_state.messages:
        if msg["role"] == "user":
            st.markdown(f"<div style='text-align:right;background-color:#dcf8c6;padding:10px;border-radius:10px;margin:5px;'>{msg['content']}</div>", unsafe_allow_html=True)
        else:
            st.markdown(f"<div style='text-align:left;background-color:#fff;padding:10px;border-radius:10px;margin:5px;border:1px solid #ccc'>{msg['content']}</div>", unsafe_allow_html=True)

# Fun side features
st.divider()
st.markdown("## ๐ฒ ูุตูุงุช ุฃููุงุช ุนุฑุงููุฉ")
if st.button("ุฃุธูุฑ 10 ูุตูุงุช ูุดููุฑุฉ"):
    recipes = {
        "ุฏูููุฉ": "ุงูููููุงุช: ูุฑู ุนูุจุ ุฑุฒุ ูุญู ููุฑููุ ุจูุงุฑุงุช.
ุงูุฎุทูุงุช:
1. ูุฎูุท ุงูุญุดู.
2. ููู ุงููุฑู.
3. ูุทุจุฎ ุนูู ูุงุฑ ูุงุฏุฆุฉ ููุฏุฉ ุณุงุนุฉ.
4. ููุฏูู ูุน ููููู.",
        "ุชุดุฑูุจ": "ุงูููููุงุช: ุฎุจุฒ ุนุฑุงููุ ูุญูุ ุทูุงุทู.
ุงูุฎุทูุงุช:
1. ูุญููุฑ ุงููุญู.
2. ูุทุจุฎ ุงูุตูุตุฉ.
3. ูุบูุณ ุงูุฎุจุฒ ุจุงููุฑู.
4. ูููุฏูู ุณุงุฎููุง.",
        "ูููุฉ": "ุงูููููุงุช: ุญูุต ูุฌุฑูุดุ ูุญูุ ุจุตู.
ุงูุฎุทูุงุช:
1. ูุทุจุฎ ุงูุญูุต.
2. ูุถูู ุงููุญู.
3. ููุฑุณ ุงููุฒูุฌ.
4. ูููุฏูู ูุน ุฎุจุฒ.",
        "ุจุฑูุงูู": "ุงูููููุงุช: ุฑุฒุ ุฏุฌุงุฌุ ุจูุงุฑุงุช ุจุฑูุงูู.
ุงูุฎุทูุงุช:
1. ูุทุจุฎ ุงูุฏุฌุงุฌ.
2. ูุบูู ุงูุฑุฒ ูุตู ุณููุฉ.
3. ูุฏูุฌูู ุจุงูุจูุงุฑุงุช ูููููู ุงูุทูู.",
        "ูุจุฉ ุญูุจ": "ุงูููููุงุช: ุจุฑุบูุ ูุญูุ ุจุตู.
ุงูุฎุทูุงุช:
1. ูุญุถุฑ ุนุฌููุฉ ุงููุจุฉ.
2. ููุดููููุง ููุญุดููุง.
3. ูููู ุญุชู ุชุชุญููุฑ.",
        "ูุจุงุจ": "ุงูููููุงุช: ูุญู ููุฑููุ ุจูุงุฑุงุชุ ุจุตู.
ุงูุฎุทูุงุช:
1. ูุฎูุท ุงูููููุงุช.
2. ูุดููู ุนูู ุฃุนูุงุฏ.
3. ูุดูู ุนูู ุงููุญู.",
        "ูุฑูุฉ ุจุงููุง": "ุงูููููุงุช: ุจุงููุงุ ูุญูุ ุทูุงุทู.
ุงูุฎุทูุงุช:
1. ูุญููุฑ ุงููุญู.
2. ูุถูู ุงูุจุงููุง ูุงูุทูุงุทู.
3. ูุทุจุฎ ุนูู ูุงุฑ ูุงุฏุฆุฉ.",
        "ุชูู ุฃุญูุฑ": "ุงูููููุงุช: ุฑุฒุ ูุนุฌูู ุทูุงุทูุ ูุฑู.
ุงูุฎุทูุงุช:
1. ูููู ุงูุฑุฒ.
2. ูุถูู ุงููุนุฌูู ูุงููุฑู.
3. ูุบุทู ููุชุฑูู ุญุชู ููุถุฌ.",
        "ููุฒู": "ุงูููููุงุช: ูุญู ุบููุ ุฑุฒุ ุจูุงุฑุงุช.
ุงูุฎุทูุงุช:
1. ูุทุจุฎ ุงููุญู.
2. ูุนุฏู ุงูุฑุฒ ุจุงูุจูุงุฑุงุช.
3. ูููุฏูููู ูุนูุง.",
        "ุดูุฑุจุฉ ุนุฏุณ": "ุงูููููุงุช: ุนุฏุณุ ุฌุฒุฑุ ุจุตู.
ุงูุฎุทูุงุช:
1. ูุบูู ุงูุนุฏุณ.
2. ูุถูู ุงูุฎุถุงุฑ.
3. ููุฑุณ ุงูุฎููุท ูููุฏููู ุณุงุฎู."
    }
    for title, steps in recipes.items():
        st.markdown(f"**{title}**

{steps}")

st.divider()
st.markdown("## ๐ฏ ุญุธูู ุงูููู")
if st.button("ุงุถุบุท ูุชุนุฑู ุญุธู ุงูููู!"):
    luck_messages = [
        "ุงูููู ุนูุฏุฌ ุญุธ ููู ุฌุฏูุง! ๐",
        "ุงูุญุฌููุฉ ุชููู ุฏูุฑู ุจุงููุ ุฎููู ุญุฐุฑุฉ ุดูู!",
        "ูุฑุตุฉ ุญููุฉ ุจุงูุทุฑููุ ูุง ุชุถูุนูููุง!",
        "ุงูุชุจูู ูู ุดุฎุต ูุญุงูู ูุฒุนูู.",
        "ุงูุญุธ ูุชูุณุท ุงููููุ ุจุณ ูุฒุงุฌุฌ ุญูู ุฑุงุญ ูุณุงุนุฏู."
    ]
    st.success(random.choice(luck_messages))

st.divider()
st.markdown("## โ ุณุคุงู ูุนู ุฃู ูุง")
yes_no_q = st.text_input("ุงูุชุจู ุณุคุงู ุชููู ุนููู ุฌูุงุจ ูุนู ุฃู ูุง:")
if st.button("ุงุณุฃูู ุงูุญุฌููุฉ"):
    if yes_no_q:
        st.info(f"๐ฎ ุงูุญุฌููุฉ ุชููู: {'ูุนู' if random.choice([True, False]) else 'ูุง'}")
